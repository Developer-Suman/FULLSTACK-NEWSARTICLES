name: Build and Deploy to Remote Server

on:
  push:
    branches:
      - main  # or the branch you want to trigger this workflow

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Build and Publish
        run: |
          cd BackEnd
          cd MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY
          dotnet restore "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj"
          dotnet build "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj" --configuration Release
          dotnet publish "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj" --configuration Release --output ./publish

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: publish
          path: BackEnd/MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY/publish/

  deploy:
    runs-on: windows-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: publish

      - name: Verify the Connection To Remote Server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          $command = "ssh $env:REMOTE_USER@$env:REMOTE_HOST -o StrictHostKeyChecking=no 'echo SSH connection successful'"
          $securePassword = ConvertTo-SecureString $env:SSH_PASSWORD -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($env:REMOTE_USER, $securePassword)
          Start-Process -NoNewWindow -FilePath "ssh" -ArgumentList $command -Credential $credential -Wait

      - name: Create Folder in the remote server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          $command = "ssh $env:REMOTE_USER@$env:REMOTE_HOST -o StrictHostKeyChecking=no 'mkdir -p ~/publish'"
          $securePassword = ConvertTo-SecureString $env:SSH_PASSWORD -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($env:REMOTE_USER, $securePassword)
          Start-Process -NoNewWindow -FilePath "ssh" -ArgumentList $command -Credential $credential -Wait

      - name: List Remote Server folder
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          $command = "ssh $env:REMOTE_USER@$env:REMOTE_HOST -o StrictHostKeyChecking=no 'ls -ltra ~/publish'"
          $securePassword = ConvertTo-SecureString $env:SSH_PASSWORD -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($env:REMOTE_USER, $securePassword)
          Start-Process -NoNewWindow -FilePath "ssh" -ArgumentList $command -Credential $credential -Wait

      - name: Deploy to server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          $command = "scp -r -o StrictHostKeyChecking=no ./publish/* $env:REMOTE_USER@$env:REMOTE_HOST:~/publish/"
          $securePassword = ConvertTo-SecureString $env:SSH_PASSWORD -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($env:REMOTE_USER, $securePassword)
          Start-Process -NoNewWindow -FilePath "cmd.exe" -ArgumentList "/c $command" -Credential $credential -Wait

          $command = "ssh $env:REMOTE_USER@$env:REMOTE_HOST -o StrictHostKeyChecking=no 'ls -l ~/publish'"
          Start-Process -NoNewWindow -FilePath "ssh" -ArgumentList $command -Credential $credential -Wait
