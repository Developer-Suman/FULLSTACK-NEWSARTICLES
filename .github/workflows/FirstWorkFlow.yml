name: Build and Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Build and Publish
        run: |
          cd BackEnd
          cd MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY
          dotnet restore "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj"
          dotnet build "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj" --configuration Release
          dotnet publish "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj" --configuration Release --output ./publish

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: publish
          path: BackEnd/MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY/publish/

  deploy:
    runs-on: windows-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: publish

      - name: Install SSH Client and expect
        run: |
          choco install openssh
          choco install expect

      - name: Set up expect script
        run: |
          echo '#!/usr/bin/expect -f\n\nset timeout 20\nset password [lindex $argv 0]\nset command [lindex $argv 1]\n\nspawn $command\nexpect {\n    "*password:" {\n        send "$password\r"\n        exp_continue\n    }\n    "yes/no" {\n        send "yes\r"\n        exp_continue\n    }\n}\n' > expect-ssh.exp
          chmod +x expect-ssh.exp

      - name: Verify the Connection To Remote Server
        run: |
          expect expect-ssh.exp "${{ secrets.SSH_PASSWORD }}" "ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'echo SSH connection successful'"

      - name: Create Folder on Remote Server
        run: |
          expect expect-ssh.exp "${{ secrets.SSH_PASSWORD }}" "ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'mkdir -p ~/publish'"

      - name: List Remote Server folder
        run: |
          expect expect-ssh.exp "${{ secrets.SSH_PASSWORD }}" "ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'ls -ltra ~/publish'"

      - name: Deploy to server
        run: |
          expect expect-ssh.exp "${{ secrets.SSH_PASSWORD }}" "scp -r -o StrictHostKeyChecking=no publish/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/publish/"
          expect expect-ssh.exp "${{ secrets.SSH_PASSWORD }}" "ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'ls -l ~/publish'"
