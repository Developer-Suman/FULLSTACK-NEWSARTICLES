name: Build and Deploy to Remote Server

on:
  push:
    branches:
      - main  # or the branch you want to trigger this workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Build and Publish
        run: |
          cd BackEnd
          cd MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY
          dotnet restore "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj"
          dotnet build "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj" --configuration Release
          dotnet publish "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj" --configuration Release --output ./publish

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: publish
          path: BackEnd/MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY/publish/

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: publish
          
      - name: List downloaded publish directory
        run: ls -ltra

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Copy file to ssh
        run: |
          mkdir -p ~/.ssh
          echo "54.233.227.63 ssh-ed25519 255 SHA256:L7UrsSv51Nn6NOhlKTSK1RpDHTr26xRIpc+OrRvWaRo" >> ~/.ssh/known_hosts
        
      - name: List Remote Server folder
        run: |
          # List the contents of the /publish directory on the remote server
          sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "ls -l"
      
      - name: Deploy to server
        run: |
          # List the contents of the /publish directory on the remote server
          sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "ls -l"
          
          # Copy files to the remote server
          sshpass -p '${{ secrets.SSH_PASSWORD }}' scp -r -o StrictHostKeyChecking=no ./* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/publish/

          # Execute the application on the remote server
          sshpass -p '${{ secrets.SSH_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "cd /publish && dotnet MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.dll"
