name: Build and Deploy to Remote Server

on:
  push:
    branches:
      - main  # or the branch you want to trigger this workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Build and Publish
        run: |
          cd BackEnd
          cd MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY
          dotnet restore "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj"
          dotnet build "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj" --configuration Release
          dotnet publish "MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY.csproj" --configuration Release --output ./publish

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: publish
          path: BackEnd/MASTER-PROJECT-IN-LAYERED-ARCHITECTURE-GENERIC-REPOSITORY/publish/

  deploy:
    runs-on: windows-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: publish
          
      - name: Prepare SSH Known Hosts
        run: |
          # Ensure the .ssh directory exists
          if (!(Test-Path -Path "$env:USERPROFILE\.ssh")) {
            New-Item -Path "$env:USERPROFILE\.ssh" -ItemType Directory
          }

          # Fetch and add the SSH host key
          $hostKey = & ssh-keyscan -H $env:REMOTE_HOST
          Add-Content -Path "$env:USERPROFILE\.ssh\known_hosts" -Value $hostKey

      - name: Verify the Connection To Remote Server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          sshpass -p $env:SSH_PASSWORD ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=$env:USERPROFILE\.ssh\known_hosts $env:REMOTE_USER@$env:REMOTE_HOST "echo SSH connection successful"
      
      - name: Create Folder in the remote server
        run: |
          sshpass -p $env:SSH_PASSWORD ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=$env:USERPROFILE\.ssh\known_hosts $env:REMOTE_USER@$env:REMOTE_HOST "mkdir -p ~/publish"

      - name: List Remote Server folder
        run: |
          sshpass -p $env:SSH_PASSWORD ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=$env:USERPROFILE\.ssh\known_hosts $env:REMOTE_USER@$env:REMOTE_HOST "ls -ltra"
      
      - name: Deploy to server
        run: |
          sshpass -p $env:SSH_PASSWORD scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=$env:USERPROFILE\.ssh\known_hosts ./* $env:REMOTE_USER@$env:REMOTE_HOST:~/publish/
          sshpass -p $env:SSH_PASSWORD ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=$env:USERPROFILE\.ssh\known_hosts $env:REMOTE_USER@$env:REMOTE_HOST "ls -l ~/publish"
